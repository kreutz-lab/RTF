% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getDynamicUMAP.R
\name{getDynamicUMAP}
\alias{getDynamicUMAP}
\title{Generates dynamic UMAP plot based on the RTF parameters for multiple time 
series}
\usage{
getDynamicUMAP(
  timeSeries,
  param.df,
  res.lst,
  species,
  metaInfo = c(),
  positionLeft = 0,
  positionTop = 0,
  numClust = NULL
)
}
\arguments{
\item{timeSeries}{Data frame with the first column named 'time' defining the
different time points and all the following columns corresponding to the
different time series.}

\item{param.df}{Data frame with the RTF parameter values. 
Its columns 'alpha', 'gamma', 'A', 'B', 'b', 'tau', and 'signum_TF'
represent the different RTF parameters. The rows correspond to the different
time series.}

\item{res.lst}{List with the RTF result for each time series}

\item{species}{Vector of the names of molecular species, which needs to have 
the same length as the number of rows of param.df.}

\item{metaInfo}{(Optional) Vector specifying additional meta information for
each time series. Needs to have the same length as the number of rows of 
param.df.}

\item{positionLeft}{Integer specifying the horizontal position of the subplot 
(Default: 0)}

\item{positionTop}{Integer specifying the vertical position of the subplot 
(Default: 0)}

\item{numClust}{(Optional) Integer indicating the number of clusters used 
for k-means clustering. If not specified, number of clusters will be 
determined automatically using the function NbClust::NbClust().}
}
\value{
Plotly object of the dynamic UMAP plot.
}
\description{
Generates dynamic UMAP plot based on the RTF parameters for 
multiple time series, where each point corresponds to a single time series. 
By hovering over a point the corresponding time-resolved behavior is 
displayed in an additional smaller subplot.
}
\examples{
\dontrun{
data(almadenTimeSeries)
data(almadenParams)
data(almadenResLst)
timeSeries <- almadenTimeSeries # first column needs to be "time"
colNames <- colnames(timeSeries[2:ncol(timeSeries)])
species <- sub("_[^_]+$", "", colNames)
metaInfo <- gsub(".*_", "", colNames)

# # Besides returning the fitted parameters, this function also generates 
# # a RDS with the final models, which is needed later on
# fileString <- "testFile"
# param.df <- getParamsFromMultipleTimeSeries(
#   almadenTimeSeries,
#   fileString = fileString,
#   saveFolderPath = tempdir(),
#   nInitialGuesses = 100
# )
# res.lst <- readRDS(file = paste0(tempdir(), fileString, ".RDS"))

plt <- getDynamicUMAP(timeSeries = timeSeries, param.df = almadenParams, 
                      res.lst = almadenResLst, 
                      species = species, metaInfo = metaInfo)
}
}
