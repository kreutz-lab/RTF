% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotDynamic2DPlot.R
\name{plotDynamic2DPlot}
\alias{plotDynamic2DPlot}
\title{Generates dynamic 2D plot based on the RTF parameters for multiple time 
series}
\usage{
plotDynamic2DPlot(
  dim1Vec,
  dim2Vec,
  ID,
  species,
  res.lst,
  metaInfo = c(),
  plotLines = TRUE,
  hRatio = 0,
  vRatio = 0
)
}
\arguments{
\item{dim1Vec}{Vector with values of first dimension.}

\item{dim2Vec}{Vector with values of second dimension. Has same length of 
dim1Vec}

\item{ID}{Vector with unique identifiers with same length as dim1Vec and 
dim2Vec.}

\item{species}{Vector with names of molecular species with same length as 
dim1Vec and dim2Vec.}

\item{res.lst}{List with the RTF result for each time series}

\item{metaInfo}{(Optional) Vector specifying  meta information for
each time series. Needs to have the same length as the number of rows of 
param.df.}

\item{plotLines}{Boolean indicating if lines should be plotted between 
species of the same name (Default: TRUE)}

\item{hRatio}{Float between 0 and 1 indicating where subplot should be placed
horizontally in relation to plot width (Default: 0).}

\item{vRatio}{Float between 0 and 1 indicating where subplot should be placed
vertically in relation to plot height (Default: 0).}
}
\value{
Plotly object of the dynamic 2D plot.
}
\description{
Generates dynamic 2D plot based on the RTF parameters for 
multiple time series, where each point corresponds to a single time series. 
By hovering over a point the corresponding time-resolved behavior is 
displayed in an additional smaller subplot.
}
\examples{
\dontrun{
data(almadenTimeSeries)
data(almadenParams)
data(almadenResLst)
timeSeries <- almadenTimeSeries # first column needs to be "time"
colNames <- colnames(timeSeries[2:ncol(timeSeries)])
species <- sub("_[^_]+$", "", colNames)
conditionID <- gsub(".*_", "", colNames)

# # Besides returning the fitted parameters, this function also generates 
# # a RDS with the final models, which is needed later on.
# # We don't run the following lines as the required object almadenResLst is 
# # available as an example (data(almadenResLst)).
# fileString <- "almadenExampleFile"
# param.df <- getParamsFromMultipleTimeSeries(
#   df = almadenTimeSeries,
#   fileString = fileString,
#   saveFolderPath = tempdir(),
#   nInitialGuesses = 50
# )
# almadenResLst <- readRDS(file = paste0(tempdir(), "/", fileString, ".RDS"))

plots <- plotLowDimensionalRTF(
  df = almadenParams,
  metaInfo = species, 
  metaInfoName = "Species",
  maxTime = max(timeSeries$time),
  numClust = NULL
)
    
df.umapData <- plots[["umap.data"]]
clustID <- df.umapData$clustID
ID <- row.names(df.umapData)
plt <- plotDynamic2DPlot(dim1Vec = df.umapData$UMAP1,
                        dim2Vec = df.umapData$UMAP2,
                        ID = ID,
                        species = species,
                        res.lst = almadenResLst,
                        metaInfo = conditionID, # alternatively: clustID
                        hRatio = 0.4, 
                        vRatio = 0
)
}
}
