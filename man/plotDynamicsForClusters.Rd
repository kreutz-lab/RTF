% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotDynamicsForClusters.R
\name{plotDynamicsForClusters}
\alias{plotDynamicsForClusters}
\title{Plot the dynamics of time series devided by cluster}
\usage{
plotDynamicsForClusters(df, scaled = TRUE)
}
\arguments{
\item{df}{Data frame 'df' of the dynamics with columns 't' (time),
'y' (value), 'id' (time series name), 'cluster' (cluster ID).}

\item{scaled}{Boolean indicating if values should be scaled for the time 
series in a cluster.}
}
\value{
ggplot2 object with the dynamics plots devided by cluster.
}
\description{
Plots the dynamics of time series devided by clusters.
}
\examples{
data(strasenParams)
metaInfo <- sub("_[^_]+$", "", row.names(strasenParams))
metaInfoName <- "species"
param.df.wMetaInfo <- data.frame(strasenParams, metaInfo)
colnames(param.df.wMetaInfo) <- c(colnames(strasenParams), metaInfoName)
gg.umap.metaInfo <- getUMAPplot(param.df.wMetaInfo,
                                groupColName = metaInfoName,
                                alpha = 1, size = 1.5)
df.umap.metaInfo <- gg.umap.metaInfo[["data"]]
clustID <- as.factor(
NbClust::NbClust(df.umap.metaInfo[, c("UMAP1", "UMAP2")],
                 method = 'complete', index = 'all')$Best.partition)
gg.umap.cluster <- getUMAPplot(data.frame(cbind(strasenParams, clustID)),
                               groupColName = "clustID", alpha = 1, size = 1.5)
df.umap.cluster <- gg.umap.cluster[["data"]]
df <- data.frame(cbind(
  df.umap.cluster[, c("UMAP1", "UMAP2", "clustID")],
  metaInfo, strasenParams))
colnames(df) <- c("UMAP1", "UMAP2", "clustID",
                         metaInfoName, colnames(strasenParams))
df.byCluster <- split(df, df$clustID)
xi <- seq(0, 10, length.out = 1000)
geom_line.lst <- list()
for (cluster in df.byCluster) {
  for (rowId in seq(nrow(cluster))) {
    row <- cluster[rowId,]
    id <- rownames(cluster)[rowId]
    functionResVec <- getTransientFunctionResult(
      t = xi,
      d = 1,
      rtfPar = row)
    
    geom_line.lst <- append(
      geom_line.lst, 
      list(data.frame(t = xi,
                      y = functionResVec,
                      id = rep(id, times = length(xi)),
                      cluster = rep(cluster$clustID, times = length(xi)))))
  }
}
df <- dplyr::bind_rows(geom_line.lst)
plot.scaled <- plotDynamicsForClusters(df, scaled = TRUE)
}
